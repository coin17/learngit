1、安装后设置

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

2、初始化及提交

$ git init
$ git add readme.txt
$ git commit -m "wrote a readme file"

3、查看工作区状态及查看修改

$ git status
$ git diff

4、查看提交日志

$ git log
$ git log --pretty=oneline

5、版本回退、查看所有记录

$ git reset --hard HEAD^
$ cat readme.txt

$ git reset --hard 313128eead7

$ git reflog

6、比较工作区和版本库里面最新版本差异

$ git diff HEAD -- readme.txt

7、撤销工作区修改

$ git checkout -- readme.txt

8、撤销暂存区内容，撤销工作区修改

$ git reset HEAD readme.txt
$ git checkout -- readme.txt

9、本地删除文件后，删除版本库

$ git rm test.txt
$ git commit -m "remove test.txt"

10、本地删除文件后，从版本库同步，撤销删除

$ git checkout -- test.txt

11、创建 SSH Key

$ ssh-keygen -t rsa -C "youremail@example.com"

12、登陆GitHub，打开“Account settings”，“SSH Keys”页面，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”

13、登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库，在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库

14、把本地仓库的内容推送到GitHub仓库

$ git remote add origin git@github.com:coin17/learngit.git
$ git push -u origin master

15、本地提交后推送远程库最新修改

$ git push origin master

16、服务器克隆本地
登陆GitHub，创建一个新的仓库，名字叫gitskills，勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。

$ git clone git@github.com:coin17/gitskills.git

17、创建dev分支，切换到dev分支

$ git checkout -b dev

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev
$ git checkout dev

18、用git branch命令查看当前分支：

$ git branch

19、dev分支的工作完成，我们就可以切换回master分支：

$ git checkout master

20、把dev分支的工作成果合并到master分支上：

$ git merge dev

21、合并完成后，就可以放心地删除dev分支了：

$ git branch -d dev

22、删除后，查看branch，就只剩下master分支了：

$ git branch

23、Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

24、解决冲突

准备新的feature1分支，继续我们的新分支开发：

$ git checkout -b feature1

修改readme.txt最后一行，改为：

Creating a new branch is quick AND simple.

在feature1分支上提交：

$ git add readme.txt 
$ git commit -m "AND simple"

切换到master分支：

$ git checkout master

在master分支上把readme.txt文件的最后一行改为：

Creating a new branch is quick & simple.

提交：

$ git add readme.txt 
$ git commit -m "& simple"

这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：

$ git merge feature1

直接查看readme.txt的内容：
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> feature1

Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：

Creating a new branch is quick and simple.
再提交：

$ git add readme.txt 
$ git commit -m "conflict fixed"

用带参数的git log也可以看到分支的合并情况：

$ git log --graph --pretty=oneline --abbrev-commit

删除feature1分支：

$ git branch -d feature1

25、分支管理策略

通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

创建并切换dev分支：

$ git checkout -b dev

修改readme.txt文件，并提交一个新的commit：

$ git add readme.txt 
$ git commit -m "add merge"

切换回master：

$ git checkout master

准备合并dev分支

$ git merge --no-ff -m "merge with no-ff" dev

因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

合并后，用git log看看分支历史：

$ git log --graph --pretty=oneline --abbrev-commit

26、“储藏”与恢复当前工作现场
$ git stash

$ git stash pop

$ git stash list

$ git stash apply stash@{0}

26、多人协作

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

27、创建标签
$ git tag v1.0

找到历史提交的commit id
$ git log --pretty=oneline --abbrev-commit
$ git tag v0.9 6224937

$ git show v0.9

创建带有说明的标签，用-a指定标签名，-m指定说明文字：

$ git tag -a v0.1 -m "version 0.1 released" 3628164

通过-s用私钥签名一个标签：

$ git tag -s v0.2 -m "signed version 0.2 released" fec145a

如果报错，请参考GnuPG帮助文档配置Key。

如果标签打错了，也可以删除：

$ git tag -d v0.1

推送某个标签到远程，使用命令：

$ git push origin v1.0

或者，一次性推送全部尚未推送到远程的本地标签：

$ git push origin --tags

如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：

$ git tag -d v0.9

然后，从远程删除。删除命令也是push，但是格式如下：

$ git push origin :refs/tags/v0.9